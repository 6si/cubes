start = test $;
test = or_test;
or_test(binary) = and_test {'or' and_test };
and_test(binary) = not_test {'and' not_test };
not_test(unary) = 'not' not_test | comparison;
comparison(binary) = expr { comparison_operator expr};

expr(binary) = and_expr { '|' and_expr };
and_expr(binary) = shift_expr { '&' shift_expr };
shift_expr(binary) = arith_expr { ('<<' | '>>') arith_expr };

arith_expr(binary) = term {('+' | '-') term} ;
term(binary) = factor {('*' | '/' | '%' | '//') factor} ;
factor(unary) = ('+' | '-' | '~') factor | power ;
power(binary) = atom ['^' factor] ;

atom = value:NUMBER 
        | value:STRING 
        | ref:reference { '(' args:arglist ')' } 
        | ( '(' expr:test ')' );
(* add subscript [] here *)
arglist = { @+:argument ','} @+:argument;
argument = test;

reference = { @+:NAME '.'} @+:NAME;

NUMBER = ?/[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?/? ;
STRING = ?/'[^'\\\r\n]*(?:\\.[^'\\\r\n]*)*'/? ;

comparison_operator = ('==' | '!=' | '<' | '<=' | '>' | '>='
                       | 'in' | 'not' 'in' | 'is' | 'is' 'not');

(* Allow any unicode character to be an identifier *)
NAME = ?/\w+/?;

